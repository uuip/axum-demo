//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Deserialize, Serialize)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub desc: Option<String>,
    #[sea_orm(unique)]
    pub phone: Option<String>,
    pub energy: Option<i32>,
    pub available_energy: Option<i32>,
    pub created_at: Option<DateTimeLocal>,
    pub updated_at: Option<DateTimeLocal>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::trees::Entity")]
    Trees,
}

impl Related<super::trees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Trees.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
